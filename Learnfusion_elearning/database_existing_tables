existing tables

create table public.users (
  id uuid not null default gen_random_uuid (),
  school_id text not null,
  first_name text null,
  middle_name text null,
  last_name text null,
  email text not null,
  contact_number text null default ''::text,
  password text null default '$2b$10$zI1G9nfk8DeLGq.2PqqMw.YFsS7.GdrFenznvvGIuQvzrxcblBwRy'::text,
  role text not null,
  section_id uuid null,
  created_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  profile_picture text null,
  status text not null default 'Active'::text,
  teacher_id uuid null,
  is_teacher boolean null default false,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email),
  constraint users_school_id_key unique (school_id),
  constraint fk_section foreign KEY (section_id) references sections (id) on delete set null,
  constraint users_teacher_id_fkey foreign KEY (teacher_id) references users (id),
  constraint users_role_check check (
    (
      role = any (
        array['Admin'::text, 'Teacher'::text, 'Student'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_users_role on public.users using btree (role) TABLESPACE pg_default;

create index IF not exists idx_users_section on public.users using btree (section_id) TABLESPACE pg_default;

create index IF not exists idx_users_status on public.users using btree (status) TABLESPACE pg_default;

create trigger student_count_trigger
after INSERT
or DELETE
or
update on users for EACH row
execute FUNCTION update_student_count ();

create table public.user_notifications (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  notification_id uuid not null,
  read_at timestamp without time zone null,
  dismissed_at timestamp without time zone null,
  created_at timestamp without time zone null default now(),
  constraint user_notifications_pkey primary key (id),
  constraint user_notifications_user_id_notification_id_key unique (user_id, notification_id),
  constraint user_notifications_notification_id_fkey foreign KEY (notification_id) references notifications (id) on delete CASCADE,
  constraint user_notifications_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.user_dismissed_notifications (
  user_id uuid not null,
  notification_id character varying not null,
  created_at timestamp with time zone not null default now(),
  constraint user_dismissed_notifications_pkey primary key (user_id, notification_id),
  constraint user_dismissed_notifications_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.submissions (
  id uuid not null default gen_random_uuid (),
  student_id uuid not null,
  section_id uuid not null,
  submitted_at timestamp without time zone not null default (now() AT TIME ZONE 'Asia/Manila'::text),
  status text not null default 'Pending'::text,
  grade numeric null,
  assessment_id uuid null,
  constraint submissions_pkey primary key (id),
  constraint submissions_assessment_id_fkey foreign KEY (assessment_id) references assessments (id) on delete set null,
  constraint submissions_section_id_fkey foreign KEY (section_id) references sections (id) on delete CASCADE,
  constraint submissions_student_id_fkey foreign KEY (student_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.student_assessments_take (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp without time zone null,
  deleted_at timestamp without time zone null,
  assigned_assessments_id uuid not null,
  users_id uuid null,
  constraint student_assessments_take_pkey primary key (id),
  constraint student_assessments_take_assigned_assessments_id_fkey foreign KEY (assigned_assessments_id) references assigned_assessments (id) on delete CASCADE,
  constraint student_assessments_take_users_id_fkey foreign KEY (users_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.student_assessments_answer (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  student_assessments_take_id bigint not null,
  users_id uuid not null,
  answer character varying null,
  constraint student_assessments_answer_pkey primary key (id),
  constraint student_assessments_answer_student_assessments_take_id_fkey foreign KEY (student_assessments_take_id) references student_assessments_take (id) on delete CASCADE,
  constraint student_assessments_answer_users_id_fkey foreign KEY (users_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.sections (
  id uuid not null default gen_random_uuid (),
  section_name text not null,
  teacher_id uuid not null,
  created_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  updated_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  student_count integer null default 0,
  updated_by uuid null,
  constraint sections_pkey primary key (id),
  constraint unique_section_name unique (section_name),
  constraint fk_updated_by foreign KEY (updated_by) references users (id) on delete set null,
  constraint teacher_id_fkey foreign KEY (teacher_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.reminders (
  id uuid not null default gen_random_uuid (),
  title text not null,
  description text null,
  due_date timestamp without time zone null,
  created_by uuid null,
  created_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  section_id uuid null,
  constraint reminders_pkey primary key (id),
  constraint reminders_created_by_fkey foreign KEY (created_by) references users (id) on delete CASCADE,
  constraint reminders_section_id_fkey foreign KEY (section_id) references sections (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.notifications (
  id uuid not null default gen_random_uuid (),
  type text not null,
  title text not null,
  description text null,
  event_date timestamp without time zone not null,
  created_by uuid null,
  section_id uuid null,
  created_at timestamp without time zone null default now(),
  constraint notifications_pkey primary key (id),
  constraint notifications_created_by_fkey foreign KEY (created_by) references users (id) on delete set null,
  constraint notifications_section_id_fkey foreign KEY (section_id) references sections (id) on delete CASCADE,
  constraint notifications_type_check check (
    (
      type = any (
        array[
          'message'::text,
          'assignment'::text,
          'quiz'::text,
          'handout'::text,
          'deadline'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create table public.messages (
  id uuid not null default gen_random_uuid (),
  sender_id uuid not null,
  receiver_id uuid not null,
  content text not null,
  created_at timestamp with time zone not null default now(),
  read boolean not null default false,
  file_name text null,
  file_url text null,
  file_type text null,
  constraint messages_pkey primary key (id),
  constraint messages_receiver_id_fkey foreign KEY (receiver_id) references users (id) on delete CASCADE,
  constraint messages_sender_id_fkey foreign KEY (sender_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_messages_receiver_sender_created on public.messages using btree (receiver_id, sender_id, created_at) TABLESPACE pg_default;

create index IF not exists idx_messages_sender_receiver_created on public.messages using btree (sender_id, receiver_id, created_at) TABLESPACE pg_default;

create index IF not exists idx_messages_read_status on public.messages using btree (receiver_id, sender_id, read) TABLESPACE pg_default;

create index IF not exists idx_messages_user_conversations on public.messages using btree (created_at desc) TABLESPACE pg_default
where
  (
    (sender_id is not null)
    or (receiver_id is not null)
  );

create table public.leaderboard (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  score numeric not null,
  section_id uuid null,
  created_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  completion_percentage numeric null,
  constraint leaderboard_pkey primary key (id),
  constraint leaderboard_section_id_fkey foreign KEY (section_id) references sections (id) on delete CASCADE,
  constraint leaderboard_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.handouts_tag_section (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp without time zone null,
  section_id uuid null,
  handouts_id bigint null,
  constraint handouts_tag_section_pkey primary key (id),
  constraint fk_hts_handout foreign KEY (handouts_id) references handouts (id) on delete CASCADE,
  constraint fk_hts_section foreign KEY (section_id) references sections (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.handouts_list_student_under_tag_section (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp without time zone null,
  users_id character varying null,
  handouts_tag_section_id character varying null,
  constraint handouts_list_student_under_tag_section_pkey primary key (id)
) TABLESPACE pg_default;

create table public.handouts (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp without time zone null,
  deleted_at timestamp without time zone null,
  youtube_link character varying null,
  file_attachments character varying null,
  handouts_title character varying null,
  users_id character varying null,
  constraint handouts_pkey primary key (id)
) TABLESPACE pg_default;

create table public.chatbot_history (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  sender text not null,
  text text not null,
  created_at timestamp with time zone null default now(),
  constraint chatbot_history_pkey primary key (id),
  constraint chatbot_history_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE,
  constraint chatbot_history_sender_check check ((sender = any (array['user'::text, 'bot'::text])))
) TABLESPACE pg_default;

create table public.assigned_assessments (
  id uuid not null default gen_random_uuid (),
  assessment_id uuid not null,
  section_id uuid not null,
  deadline timestamp without time zone not null,
  assigned_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  constraint assigned_assessments_pkey primary key (id),
  constraint assigned_assessments_assessment_id_fkey foreign KEY (assessment_id) references assessments (id) on delete CASCADE,
  constraint assigned_assessments_section_id_fkey foreign KEY (section_id) references sections (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.assessments (
  id uuid not null default gen_random_uuid (),
  teacher_id uuid not null,
  title text not null,
  type text not null,
  questions jsonb not null,
  created_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  updated_at timestamp without time zone null default (now() AT TIME ZONE 'Asia/Manila'::text),
  description text null,
  handout_id bigint null,
  constraint assessments_pkey primary key (id),
  constraint assessments_handout_id_fkey foreign KEY (handout_id) references handouts (id) on delete set null,
  constraint assessments_teacher_id_fkey foreign KEY (teacher_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.archived_records (
  id bigint generated by default as identity not null,
  archived_at timestamp with time zone not null default now(),
  original_table_name text not null,
  record_data jsonb not null,
  archived_by uuid null,
  constraint archived_records_pkey primary key (id),
  constraint archived_records_archived_by_fkey foreign KEY (archived_by) references users (id) on delete set null
) TABLESPACE pg_default;

create index IF not exists idx_archived_records_record_data on public.archived_records using gin (record_data) TABLESPACE pg_default;
